paths:
    /users:
        get:
            summary: List users
            description: |
                Retrieve a paginated list of users with optional filtering and search capabilities.
                Only accessible by administrators.

                **Features:**
                - Pagination support (max 100 items per page)
                - Role-based filtering (ADMIN, AUTHOR)
                - Status filtering (ACTIVE, INACTIVE)
                - Search by name or email (case-insensitive)
                - Ordered by creation date (descending)

                **Rate Limiting:**
                - 100 requests per minute for admins
                - 20 requests per minute for authors

                **Authorization:**
                - Requires admin role
                - Bearer token authentication
            security:
                - BearerAuth: []
            tags:
                - Users
            parameters:
                - in: query
                  name: page
                  schema:
                      type: integer
                      minimum: 1
                      default: 1
                  description: Page number for pagination
                - in: query
                  name: limit
                  schema:
                      type: integer
                      minimum: 1
                      maximum: 100
                      default: 10
                  description: Number of items per page
                - in: query
                  name: role
                  schema:
                      type: string
                      enum: [ADMIN, AUTHOR]
                  description: Filter users by role
                - in: query
                  name: status
                  schema:
                      type: string
                      enum: [ACTIVE, INACTIVE]
                  description: Filter users by status
                - in: query
                  name: search
                  schema:
                      type: string
                  description: Search users by name or email (case-insensitive)
            responses:
                "200":
                    description: List of users with pagination details
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    users:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/User"
                                    pagination:
                                        $ref: "#/components/schemas/Pagination"
                            example:
                                users:
                                    - id: "123e4567-e89b-12d3-a456-426614174000"
                                      email: "admin@scoretrend.com"
                                      name: "Admin User"
                                      role: "ADMIN"
                                      status: "ACTIVE"
                                      email_verified: true
                                      email_verified_at: "2025-02-15T10:30:00Z"
                                      created_at: "2025-02-15T10:30:00Z"
                                      updated_at: "2025-02-15T10:30:00Z"
                                    - id: "123e4567-e89b-12d3-a456-426614174001"
                                      email: "author@scoretrend.com"
                                      name: "Author User"
                                      role: "AUTHOR"
                                      status: "ACTIVE"
                                      email_verified: true
                                      email_verified_at: "2025-02-15T10:30:00Z"
                                      created_at: "2025-02-15T10:30:00Z"
                                      updated_at: "2025-02-15T10:30:00Z"
                                pagination:
                                    total: 2
                                    page: 1
                                    limit: 10
                                    pages: 1
                "400":
                    description: Invalid request parameters
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
                            example:
                                error: "Invalid request parameters"
                                details: {page: "Must be a positive integer", limit: "Cannot exceed 100 items per page"}
                "401":
                    $ref: "#/components/responses/Unauthorized"
                "403":
                    $ref: "#/components/responses/Forbidden"
                "429":
                    description: Too many requests
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
                            example:
                                error: "Rate limit exceeded"
                                details: {limit: "100 requests per minute", reset: "2025-02-15T10:31:00Z"}
                "500":
                    $ref: "#/components/responses/InternalError"

    /users/profile:
        get:
            summary: Get own profile
            description: |
                Retrieves the profile of the currently authenticated user.

                **Features:**
                - Returns complete user profile
                - Includes verification status
                - Shows last login information
                - Includes author details if available
            security:
                - BearerAuth: []
            tags:
                - Users
            responses:
                "200":
                    description: User profile
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/UserProfile"
                            example:
                                id: "123e4567-e89b-12d3-a456-426614174000"
                                email: "author@scoretrend.com"
                                name: "Author User"
                                role: "AUTHOR"
                                status: "ACTIVE"
                                email_verified: true
                                email_verified_at: "2025-02-15T10:30:00Z"
                                last_login: "2025-02-15T10:30:00Z"
                                author_detail:
                                    {
                                        profile_image_url: "https://storage.googleapis.com/scoretrend/authors/profile.jpg",
                                        translations:
                                            {en: {name: "Author User", description: "Sports journalist and analyst"}},
                                    }
                "401":
                    $ref: "#/components/responses/Unauthorized"
                "404":
                    $ref: "#/components/responses/NotFound"

    /users/{id}:
        get:
            summary: Get user by ID
            description: |
                Retrieves detailed information about a specific user.
                Only accessible by administrators.

                **Authorization:**
                - Requires admin role
                - Bearer token authentication

                **Edge Cases:**
                - Returns 401 if not authenticated
                - Returns 403 if not admin
                - Returns 404 if user not found
            security:
                - BearerAuth: []
            tags:
                - Users
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                      type: string
                      format: uuid
                  description: User ID
            responses:
                "200":
                    description: User details
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/User"
                            example:
                                id: "123e4567-e89b-12d3-a456-426614174000"
                                email: "user@scoretrend.com"
                                name: "Example User"
                                role: "AUTHOR"
                                status: "ACTIVE"
                                email_verified: true
                                email_verified_at: "2025-02-15T10:30:00Z"
                                created_at: "2025-02-15T10:30:00Z"
                                updated_at: "2025-02-15T10:30:00Z"
                "401":
                    $ref: "#/components/responses/Unauthorized"
                "403":
                    $ref: "#/components/responses/Forbidden"
                "404":
                    $ref: "#/components/responses/NotFound"

        put:
            summary: Update user
            description: |
                Updates user information.
                Only accessible by administrators.

                **Updatable Fields:**
                - Name
                - Email (requires re-verification)
                - Role (admin only)
                - Status (admin only)

                **Edge Cases:**
                - Returns 401 if not authenticated
                - Returns 403 if not admin
                - Returns 404 if user not found
                - Returns 409 if email exists
            security:
                - BearerAuth: []
            tags:
                - Users
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                      type: string
                      format: uuid
                  description: User ID
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/UpdateUserRequest"
                        example:
                            name: "Updated Name"
                            email: "updated@scoretrend.com"
            responses:
                "200":
                    description: User updated successfully
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/User"
                            example:
                                id: "123e4567-e89b-12d3-a456-426614174000"
                                email: "updated@scoretrend.com"
                                name: "Updated Name"
                                role: "AUTHOR"
                                status: "ACTIVE"
                                email_verified: false
                                created_at: "2025-02-15T10:30:00Z"
                                updated_at: "2025-02-15T10:31:00Z"
                "400":
                    $ref: "#/components/responses/ValidationError"
                "401":
                    $ref: "#/components/responses/Unauthorized"
                "403":
                    $ref: "#/components/responses/Forbidden"
                "404":
                    $ref: "#/components/responses/NotFound"
                "409":
                    $ref: "#/components/responses/Conflict"

        delete:
            summary: Delete user
            description: |
                Deletes a user from the system.
                Only accessible by administrators.

                **Deletion Process:**
                - Deletes user profile
                - Deletes author details
                - Archives blog posts
                - Removes comments
                - Cleans up media files

                **Edge Cases:**
                - Returns 401 if not authenticated
                - Returns 403 if not admin
                - Returns 404 if user not found
                - Returns 409 if user has active content
            security:
                - BearerAuth: []
            tags:
                - Users
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                      type: string
                      format: uuid
                  description: User ID
            responses:
                "204":
                    description: User deleted successfully
                "401":
                    $ref: "#/components/responses/Unauthorized"
                "403":
                    $ref: "#/components/responses/Forbidden"
                "404":
                    $ref: "#/components/responses/NotFound"
                "409":
                    description: Conflict - User has active content
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
                            example:
                                error: "Cannot delete user with active content"
                                details: {active_posts: 5, message: "Please archive or reassign user's content first"}

    /users/{id}/status:
        patch:
            summary: Update user status
            description: |
                Updates a user's status (ACTIVE/INACTIVE).
                Only accessible by administrators.

                **Status Changes:**
                - ACTIVE to INACTIVE: Suspends user access
                - INACTIVE to ACTIVE: Restores user access
                - Requires reason for audit trail

                **Notifications:**
                - Email sent to user on status change
                - Audit log entry created
                - Admin notification created

                **Edge Cases:**
                - Returns 401 if not authenticated
                - Returns 403 if not admin
                - Returns 404 if user not found
                - Returns 422 if invalid status transition
            security:
                - BearerAuth: []
            tags:
                - Users
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                      type: string
                      format: uuid
                  description: User ID
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - status
                            properties:
                                status:
                                    type: string
                                    enum: [ACTIVE, INACTIVE]
                                reason:
                                    type: string
                                    maxLength: 500
                        example:
                            status: "INACTIVE"
                            reason: "Account suspended due to violation of terms"
            responses:
                "200":
                    description: User status updated successfully
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/User"
                            example:
                                id: "123e4567-e89b-12d3-a456-426614174000"
                                email: "user@scoretrend.com"
                                name: "Example User"
                                role: "AUTHOR"
                                status: "INACTIVE"
                                email_verified: true
                                created_at: "2025-02-15T10:30:00Z"
                                updated_at: "2025-02-15T10:31:00Z"
                "400":
                    $ref: "#/components/responses/ValidationError"
                "401":
                    $ref: "#/components/responses/Unauthorized"
                "403":
                    $ref: "#/components/responses/Forbidden"
                "404":
                    $ref: "#/components/responses/NotFound"
                "422":
                    description: Invalid status transition
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
                            example:
                                error: "Invalid status transition"
                                details:
                                    {
                                        current_status: "INACTIVE",
                                        requested_status: "INACTIVE",
                                        message: "User is already inactive",
                                    }

components:
    schemas:
        User:
            type: object
            required:
                - id
                - email
                - name
                - role
                - status
                - email_verified
                - created_at
                - updated_at
            properties:
                id:
                    type: string
                    format: uuid
                    example: "123e4567-e89b-12d3-a456-426614174000"
                email:
                    type: string
                    format: email
                    example: "user@scoretrend.com"
                name:
                    type: string
                    minLength: 2
                    maxLength: 100
                    example: "John Doe"
                role:
                    type: string
                    enum: [ADMIN, AUTHOR]
                    example: "AUTHOR"
                status:
                    type: string
                    enum: [ACTIVE, INACTIVE]
                    example: "ACTIVE"
                email_verified:
                    type: boolean
                    example: true
                email_verified_at:
                    type: string
                    format: date-time
                    nullable: true
                    example: "2025-02-15T10:30:00Z"
                created_at:
                    type: string
                    format: date-time
                    example: "2025-02-15T10:30:00Z"
                updated_at:
                    type: string
                    format: date-time
                    example: "2025-02-15T10:30:00Z"

        UserProfile:
            allOf:
                - $ref: "#/components/schemas/User"
                - type: object
                  properties:
                      last_login:
                          type: string
                          format: date-time
                          example: "2025-02-15T10:30:00Z"
                      author_detail:
                          type: object
                          properties:
                              profile_image_url:
                                  type: string
                                  format: uri
                              translations:
                                  type: object
                                  additionalProperties:
                                      type: object
                                      properties:
                                          name:
                                              type: string
                                          description:
                                              type: string

        UpdateUserRequest:
            type: object
            properties:
                email:
                    type: string
                    format: email
                    example: "updated@scoretrend.com"
                name:
                    type: string
                    minLength: 2
                    maxLength: 100
                    example: "Updated Name"
                role:
                    type: string
                    enum: [ADMIN, AUTHOR]
                    example: "AUTHOR"

        Pagination:
            type: object
            required:
                - total
                - page
                - limit
                - pages
            properties:
                total:
                    type: integer
                    description: Total number of items
                    example: 100
                page:
                    type: integer
                    description: Current page number
                    example: 1
                limit:
                    type: integer
                    description: Items per page
                    example: 10
                pages:
                    type: integer
                    description: Total number of pages
                    example: 10

        Error:
            type: object
            required:
                - error
            properties:
                error:
                    type: string
                    description: Error message
                code:
                    type: string
                    description: Error code
                details:
                    type: object
                    description: Additional error details

    responses:
        ValidationError:
            description: Validation error
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            error:
                                type: string
                                example: "Validation failed"
                            details:
                                type: object
                                example:
                                    email: "Must be a valid email address"
                                    password: "Must be at least 8 characters"

        Unauthorized:
            description: Authentication required
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            error:
                                type: string
                                example: "Authentication required"

        Forbidden:
            description: Insufficient permissions
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            error:
                                type: string
                                example: "Insufficient permissions"
                            details:
                                type: object
                                example:
                                    required_role: "ADMIN"
                                    current_role: "AUTHOR"

        NotFound:
            description: Resource not found
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            error:
                                type: string
                                example: "Resource not found"
                            details:
                                type: object
                                example:
                                    id: "123e4567-e89b-12d3-a456-426614174000"
                                    type: "User"

        Conflict:
            description: Resource already exists
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            error:
                                type: string
                                example: "Resource already exists"
                            details:
                                type: object
                                example:
                                    field: "email"
                                    value: "existing@scoretrend.com"

        InternalError:
            description: Internal server error
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            error:
                                type: string
                                example: "Internal server error"
                            code:
                                type: string
                                example: "INTERNAL_ERROR"
